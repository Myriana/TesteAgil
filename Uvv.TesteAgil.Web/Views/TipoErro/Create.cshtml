@model Uvv.TesteAgil.Entidades.Modelos.TipoErro

<h2>Criar Novo Tipo de Erro</h2>

@*@using (Html.BeginForm("Create", "TipoErro", FormMethod.Post, new { id = "formTipoErroCreate" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="form-group col-xs-8">
            @Html.LabelFor(model => model.Descricao)
            @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-xs-4">
            @Html.LabelFor(model => model.Gravidade)
            @Html.EditorFor(model => model.Gravidade, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Gravidade, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <input type="button" value="Salvar" class="btn btn-primary btn-lg" />
    </div>*@





@*<div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm())
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">Criar Tipo de Erro</h4>
                </div>
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Gravidade, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Gravidade, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Gravidade, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" value="Salvar" class="btn btn-primary" />
                    </div>
                </div>
            }
        </div>
    </div>*@


@using (Html.BeginForm("Create", "TipoErro", FormMethod.Post, new { id = "formTipoErroCreate" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gravidade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Gravidade", new List<SelectListItem> {
                    new SelectListItem { Text = "Alto", Value = "1"},
                    new SelectListItem { Text = "Médio", Value = "2"},
                    new SelectListItem { Text = "Baixo", Value = "3"}
                }, new { @class = "form-control" });
                @Html.ValidationMessageFor(model => model.Gravidade, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit"  onclick="submeter(event)" value="Salvar" class="btn btn-default btnSalvar" />
            </div>
        </div>*@
        <div class="form-group">
            <input type="submit" value="Salvar" id="btnCriar" class="btn btn-primary" />
            @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
        </div>
    </div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@

@section Scripts{
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/projeto/EnviarFormulario.js"></script>
<script type="text/javascript">

    var btnAcao = $("input[type='button']");
    var formulario = $("#formTipoErroCreate");

</script>


    <script>
        //$("#btnCriar").click(function () {
        //    $.post("/TipoErro/Create", $("#formTipoErroCreate").serialize()
        //    ).done(function () {
        //        $("#divClientes").load("/clientes/index");
        //    });
        //    $("#modalTipoErro").modal("hide");
        //});

        //var btnAcao = $("input[type='button']");
        //var formulario = $("#formTipoErro");

        //$('input.btn').on('click', submeter);

        //function submeter(evento) {
        //    evento.preventDefault();

        //    if (validarFormulario()) {

        //        var url = formulario.prop("action");
        //        var metodo = formulario.prop("method");

        //        var dadosFormulario = formulario.serialize();

        //        $.ajax({
        //            url: url,
        //            type: metodo,
        //            data: dadosFormulario,
        //            success: tratarRetorno
        //        });

        //    }
        //}

        //function validarFormulario() {
        //    debugger;

        //    btnAcao.prop("disabled", true);

        //    var validado = false;

        //    // verifica se formulario tem o método valid
        //    if (formulario.valid == undefined) {

        //        validado = true;
        //    }
        //    else {

        //        validado = formulario.valid();

        //        if (!validado) {

        //            btnAcao.prop("disabled", false);
        //        }
        //    }

        //    return validado;
        //}

        //function tratarRetorno(resultadoServidor) {

        //    if (resultadoServidor.resultado) {

        //        toastr['success'](resultadoServidor.message);

        //        $('#modalTipoErro').modal('hide');

        //        $('#gridTipoErro').bootgrid('reload');

        //    }
        //    else {

        //        toastr['error'](resultadoServidor.message, msgErro);

        //        btnAcao.prop("disabled", false);
        //    }
        //}
</script>

}

